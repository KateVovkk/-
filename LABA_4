#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

// Шаблонный класс Pair для хранения пары значений разных типов
template <typename T1, typename T2>
class Pair {
public:
    T1 first;
    T2 second;

    Pair(const T1& f, const T2& s) : first(f), second(s) {}
};

// Класс Book представляет книгу с основной информацией
class Book {
public:
    std::string title;
    std::string author;
    std::string genre;

    // Конструктор для инициализации информации о книге
    Book(const std::string& t, const std::string& a, const std::string& g)
        : title(t), author(a), genre(g) {}

    // Виртуальная функция для отображения информации о книге
    virtual void displayInfo() const {
        std::cout << "Название: " << title << ", Автор: " << author << ", Жанр: " << genre << std::endl;
    }
};

// Класс Fiction представляет книгу жанра "Художественная литература"
class Fiction : public Book {
public:
    // Конструктор для инициализации художественной книги
    Fiction(const std::string& t, const std::string& a) : Book(t, a, "Художественная литература") {}

    // Переопределение функции отображения для вывода информации о жанре
    void displayInfo() const override {
        std::cout << "Художественная книга - ";
        Book::displayInfo();
    }
};

// Класс NonFiction представляет книгу жанра "Научная литература"
class NonFiction : public Book {
public:
    // Конструктор для инициализации научной книги
    NonFiction(const std::string& t, const std::string& a) : Book(t, a, "Научная литература") {}

    // Переопределение функции отображения для вывода информации о жанре
    void displayInfo() const override {
        std::cout << "Научная книга - ";
        Book::displayInfo();
    }
};

// Класс Library представляет библиотеку с методами управления книгами
class Library {
private:
    std::vector<Book*> books; // Вектор указателей на книги

public:
    // Метод для добавления новой книги в библиотеку
    void addBook() {
        std::string title, author, genre;
        std::cout << "Введите название книги: ";
        std::cin >> title;
        std::cout << "Введите автора книги: ";
        std::cin >> author;
        std::cout << "Введите жанр книги: ";
        std::cin >> genre;

        Book* book = new Book(title, author, genre);
        books.push_back(book);

        std::cout << "Книга успешно добавлена." << std::endl;
    }

    // Деструктор для освобождения памяти от книг при завершении программы
    ~Library() {
        for (auto& book : books) {
            delete book;
        }
    }

    // Метод для поиска книги по названию
    Book* searchBook() {
        std::string title;
        std::cout << "Введите название книги для поиска: ";
        std::cin >> title;

        auto it = std::find_if(books.begin(), books.end(), [title](const Book* b) { return b->title == title; });
        return (it != books.end()) ? *it : nullptr;
    }

    // Метод для сортировки книг по автору
    void sortBooksByAuthor() {
        std::sort(books.begin(), books.end(), [](const Book* a, const Book* b) {
            return a->author < b->author;
            });
        std::cout << "Книги отсортированы по автору." << std::endl;
    }

    // Дополнительные методы для функциональности, которая не реализована в данном коде
    void addProduct() {
        std::cout << "Функциональность добавления продукта не реализована." << std::endl;
    }

    void searchProduct() {
        std::cout << "Функциональность поиска продукта не реализована." << std::endl;
    }

    // Метод для сохранения информации о книгах в файл
    void saveToFile(const std::string& filename) const {
        std::ofstream file(filename);
        if (file.is_open()) {
            for (const auto& book : books) {
                file << book->title << "," << book->author << "," << book->genre << std::endl;
            }
            file.close();
            std::cout << "Данные сохранены в файл: " << filename << std::endl;
        }
    }

    // Метод для изменения жанра книги по её названию
    void modifyBookGenre(const std::string& bookTitle, const std::string& newGenre) {
        auto it = std::find_if(books.begin(), books.end(), [bookTitle](const Book* b) { return b->title == bookTitle; });
        if (it != books.end()) {
            (*it)->genre = newGenre;
        }
    }

    // Метод для отображения пользовательского меню
    void displayMenu() {
        int choice;
        do {
            std::cout << "\nМеню:\n";
            std::cout << "1. Добавить книгу\n";
            std::cout << "2. Поиск книги\n";
            std::cout << "3. Сортировка книг по автору\n";
            std::cout << "4. Добавить продукт\n";
            std::cout << "5. Поиск продукта\n";
            std::cout << "6. Сохранить в файл\n";
            std::cout << "0. Выход\n";
            std::cout << "Введите ваш выбор: ";
            std::cin >> choice;

            switch (choice) {
            case 1:
                addBook();
                break;
            case 2:
            {
                Book* foundBook = searchBook
