#include <iostream>
#include <iterator>
#include <vector>

// Базовый класс для электронных устройств
class ElectronicDevice {
protected:
    std::string brand;
    std::string model;

public:
    // Конструктор для инициализации бренда и модели
    ElectronicDevice(std::string _brand, const std::string& _model)
        : brand(std::move(_brand)), model(_model) {}

    // Виртуальная функция для отображения информации об устройстве
    virtual void display() const {
        std::cout << "Бренд: " << brand << ", Модель: " << model << std::endl;
    }

    // Виртуальная функция для установки нового бренда и модели
    virtual void setNew(const std::string& newBrand, const std::string& newModel) {
        brand = newBrand;
        model = newModel;
    }

    // Функции-геттеры для бренда и модели
    const std::string& getBrand() {
        return brand;
    }

    const std::string& getModel() {
        return model;
    }

    // Виртуальный деструктор
    virtual ~ElectronicDevice() {}
};

// Производный класс для смартфонов, унаследованный от ElectronicDevice
class Smartphone : public ElectronicDevice {
private:
    std::string os;
    double os_serial;

public:
    // Конструктор для инициализации специфических для смартфона атрибутов
    Smartphone(const std::string& _brand, const std::string& _model, const std::string& _os, double os_serial_)
        : ElectronicDevice(_brand, _model), os(_os), os_serial(os_serial_) {}

    // Переопределение функции отображения для включения информации, специфичной для смартфона
    void display() const override {
        ElectronicDevice::display();
        std::cout << "Операционная система: " << os << " " << os_serial << std::endl;
    }

    // Переопределение функции установки нового бренда и модели для обновления номера версии ОС
    void setNew(const std::string& newBrand, const std::string& newModel) override {
        ElectronicDevice::setNew(newBrand, newModel);
        this->os_serial += 1;
    }
};

// Производный класс для ноутбуков, унаследованный от ElectronicDevice
class Laptop : public ElectronicDevice {
private:
    double screenSize;
    double battery_capacity;

public:
    // Конструктор для инициализации специфических для ноутбука атрибутов
    Laptop(const std::string& _brand, const std::string& _model, double _screenSize, double battery_capacity_)
        : ElectronicDevice(_brand, _model), screenSize(_screenSize), battery_capacity(battery_capacity_) {}

    // Переопределение функции отображения для включения информации, специфичной для ноутбука
    void display() const override {
        ElectronicDevice::display();
        std::cout << "Размер экрана: " << screenSize << " дюймов. Емкость аккумулятора: " << battery_capacity << "mAh" << std::endl;
    }

    // Переопределение функции установки нового бренда и модели для обновления емкости аккумулятора
    void setNew(const std::string& newBrand, const std::string& newModel) override {
        ElectronicDevice::setNew(newBrand, newModel);
        this->battery_capacity *= 1.2;
    }
};

// Функция для изменения характеристик устройства
void modifyDevice(ElectronicDevice* device) {
    device->setNew("Обновленный " + device->getBrand(), device->getModel());
}

// Главная функция
int main() {
    std::vector<ElectronicDevice*> devices;

    // Заполняем вектор устройствами
    devices.push_back(new Smartphone("Samsung", "Galaxy S21", "Android", 11));
    // ... (аналогичные строки для других устройств)

    // Отображаем информацию о каждом устройстве с использованием итераторов
    for (auto it = devices.begin(); it != devices.end(); ++it) {
        (*it)->display();
    }

    // Обновляем все устройства
    for (auto it = devices.begin(); it != devices.end(); ++it) {
        modifyDevice(*it);
    }

    // Отображаем информацию об обновленных устройствах
    for (auto it = devices.begin(); it != devices.end(); ++it) {
        (*it)->display();
    }

    // Освобождаем выделенную память
    for (auto it = devices.begin(); it != devices.end(); ++it) {
        delete *it;
    }

    return 0;
}
